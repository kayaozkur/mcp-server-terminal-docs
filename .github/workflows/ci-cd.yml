name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to npm'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Check formatting
        run: |
          npm run format
          git diff --exit-code || echo "::warning::Code formatting issues detected. Run 'npm run format' locally."

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: License check
        run: |
          npm install -g license-checker
          license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense'
        continue-on-error: true

  build:
    name: Build TypeScript
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: build
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x', '21.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --passWithNoTests
        timeout-minutes: 10

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            junit.xml
          retention-days: 7

  claude-desktop-compatibility:
    name: Claude Desktop Compatibility Test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Test MCP server startup
        run: |
          timeout 10s node dist/index.js || exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "Server started successfully (timeout expected)"
            exit 0
          else
            echo "Server failed to start"
            exit 1
          fi
        shell: bash
        if: runner.os != 'Windows'

      - name: Test MCP server startup (Windows)
        run: |
          $job = Start-Job -ScriptBlock { node dist/index.js }
          Start-Sleep -Seconds 10
          $state = $job.State
          Stop-Job -Job $job
          if ($state -eq "Running") {
            Write-Host "Server started successfully"
            exit 0
          } else {
            Write-Host "Server failed to start"
            exit 1
          }
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Validate package.json
        run: |
          node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.error('Missing required fields:', missing);
            process.exit(1);
          }
          console.log('Package.json validation passed');
          "

  publish-check:
    name: Pre-publish Validation
    runs-on: ubuntu-latest
    needs: [build, test, claude-desktop-compatibility]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Dry run publish
        run: npm publish --dry-run

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: publish-check
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    environment:
      name: npm-publish
      url: https://www.npmjs.com/package/@lepion/mcp-server-terminal-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## @lepion/mcp-server-terminal-docs ${{ github.ref_name }}
            
            ### Installation
            ```bash
            npm install @lepion/mcp-server-terminal-docs@${{ github.ref_name }}
            ```
            
            ### What's Changed
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, build, test, claude-desktop-compatibility]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Claude Desktop | ${{ needs.claude-desktop-compatibility.result }} |" >> $GITHUB_STEP_SUMMARY