name: Reusable MCP Server Workflow

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
        description: 'NPM package name (e.g., @lepion/mcp-server-terminal-docs)'
      node-version:
        required: false
        type: string
        default: '18.x'
        description: 'Default Node.js version'
      run-tests:
        required: false
        type: boolean
        default: true
        description: 'Whether to run test suite'
      test-command:
        required: false
        type: string
        default: 'npm test -- --passWithNoTests'
        description: 'Test command to run'
    secrets:
      NPM_TOKEN:
        required: false
        description: 'NPM authentication token for publishing'

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    outputs:
      lint-status: ${{ steps.lint.outcome }}
      audit-status: ${{ steps.audit.outcome }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
      
      - run: npm ci
      
      - id: lint
        run: npm run lint
        continue-on-error: true
      
      - id: audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Format check
        run: |
          npm run format
          git diff --exit-code || echo "::warning::Formatting issues found"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
      
      - run: npm ci
      
      - run: npm run build
      
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test-matrix:
    name: Test ${{ matrix.os }} / Node ${{ matrix.node }}
    if: ${{ inputs.run-tests }}
    runs-on: ${{ matrix.os }}
    needs: build
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ['18.x', '20.x', '21.x']
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      
      - run: npm ci
      
      - run: ${{ inputs.test-command }}
        timeout-minutes: 10

  mcp-compatibility:
    name: MCP Compatibility
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
      
      - run: npm ci
      
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Test server startup (Unix)
        if: runner.os != 'Windows'
        run: |
          timeout 10s node dist/index.js || [ $? -eq 124 ]
      
      - name: Test server startup (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $job = Start-Job { node dist/index.js }
          Start-Sleep -Seconds 10
          Stop-Job $job
          if ($job.State -ne "Running") { exit 1 }

  publish:
    name: Publish
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build, test-matrix, mcp-compatibility]
    environment:
      name: npm-publish
      url: https://www.npmjs.com/package/${{ inputs.package-name }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: 'https://registry.npmjs.org'
      
      - run: npm ci
      
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Version check
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          [ "$PKG_VERSION" = "$TAG_VERSION" ] || exit 1
      
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## ${{ inputs.package-name }} ${{ github.ref_name }}
            
            Install: `npm install ${{ inputs.package-name }}@${{ github.ref_name }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}